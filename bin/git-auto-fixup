#!/bin/bash

set -eu
set -o pipefail

upstream_branch="$(git rev-parse --abbrev-ref --symbolic-full-name @{u})"
gh_pr_branch=

if [ -x "$(command -v pr)" ] && gh pr view &>/dev/null; then
    gh_pr_branch="origin/$(gh pr view --json baseRefName -q .baseRefName)"
fi

branch=

while true; do
    >&2 echo
    >&2 echo "Rebase to? "
    >&2 echo
    >&2 echo "p = parent ($(git log --oneline HEAD -1))"
    >&2 echo "u = upstream ($upstream_branch)"
    >&2 echo "g = github pr target ($gh_pr_branch)"
    >&2 echo "d = show diff"
    >&2 echo "a = abort"
    read -n1 option

    if [ "$option" = "p" ]; then
        branch=HEAD
        break
    elif [ "$option" = "u" ]; then
        branch="$upstream_branch"
        break
    elif [ "$option" = "g" ]; then
        branch="$gh_pr_branch"
        break
    elif [ "$option" = "d" ]; then
        git show
        continue
    elif [ "$option" = "a" ]; then
        exit 3
    else
        continue
    fi
    >&2 echo
done

if [ "$branch" = "" ]; then
    >&2 echo "No branch to fixup to. Abort."
    exit 1
fi

local_rev="$(git rev-parse HEAD)"

if [ "$branch" = "HEAD" ]; then
    target_rev="$(git rev-parse HEAD^)"
else
    target_rev="$(git rev-parse "$branch")"
fi

if [ "$target_rev" = "$local_rev" ]; then
    >&2 echo "No commit available to run fixup against"
    exit 1
fi

git add-untracked "${1:-}"


if [ "$branch" = "HEAD" ]; then
    git commit --fixup=HEAD
    git rebase -i --autosquash --autostash HEAD^^
else
    rev=$(git log --oneline HEAD...$branch | fzf --reverse --height 40% --border --ansi --preview 'git show --color=always {1}' | awk '{print $1}')
    git commit --fixup=$rev
    git rebase -i --autosquash --autostash "$branch"
fi
