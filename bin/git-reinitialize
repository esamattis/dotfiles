#!/bin/bash

set -eu
set -o pipefail
remote_file=".gitremote"

if [ "${1:-}" = "-h" ] || [  "${1:-}" = "--help" ]; then
    echo
    echo "Reinitialize .git directory with remotes and branches from a $remote_file file"
    echo
    echo "Line format in $remote_file file:"
    echo "    <remote-name> <remote-url> [branch]"
    echo
    echo "Pass the values directly as arguments to skip the $remote_file file:"
    echo "    git-reinitialize <remote> <url> [branch]"
    echo
    exit 0
fi


add_remote() {
    >&2 echo "Adding remote $@"
    
    local remote="$1"
    local url="$2"
    local branch="${3:-}"

    # if git has remote
    if git remote | grep -q "^$remote$"; then
        git 
        >&2 git remote show "$remote"
        >&2 echo 
        >&2 echo 
        >&2 echo "git remote $remote already exists"

        local option=
        read -p "delete? y/n> " -n1 option
        echo
        if [ "$option" = "y" ]; then
            git remote remove "$remote"
        else
            return
        fi
    fi

    git remote add "$remote" "$url"
    git fetch "$remote"

    if [ "$remote" = "origin" ]; then
        if [ "$branch" = "" ]; then
            branch="$(git remote show $remote | sed -n '/HEAD branch/s/.*: //p')"
        fi

        if [ "$(git branch --show-current)" != "$branch" ]; then
            git switch -c "$branch"
        fi

        git reset "$remote/$branch"

        git branch --set-upstream-to $remote/$branch
    fi

}

if [ "${1:-}" != "" ]; then
    if [ ! -d .git ]; then
        git init
    fi
    add_remote $1 $2 ${3:-}
    exit 0
fi

while true; do
    if [ "$PWD" = "/" ]; then
        >&2 echo "No $remote_file file found"
        exit 1
    fi

    if [ -f "$remote_file" ]; then
        >&2 echo "Found $remote_file file from $PWD"
        break;
    fi
done

if [ ! -d .git ]; then
    git init
fi

# This loop is weird but needed. The file descriptor trick is required to keep
# the script interactive inside the loop so read prompts can be used. The IFS=
# ensures files without ending newlines are read correctly.

# Open the file on file descriptor 3
exec 3< $remote_file 
while IFS= read -r line <&3
do
    # Skip empty lines and comments
    if [ "$line" = "" ] || [ "${line:0:1}" = "#" ]; then
        continue
    fi

    add_remote $(echo "$line" | envsubst)
done

# Close file descriptor 3
exec 3<&-
