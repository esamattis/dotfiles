#!/bin/bash

set -eu

message=

if [ "${1:-}" = "-m" ]; then
    message="$2"
    # Remove the -m and message from the arguments
    shift
    shift
fi

if [ "${1:-}" = "" ]; then
    path="."
    cd "$(git rev-parse --show-toplevel)"
else
    path="$1"
fi

# Add untracked files
git ls-files --others --exclude-standard "$path" | xargs git add --intent-to-add

# Interactive lines from modified and untracked files
git add -p "$path"

if [ "$(git diff --cached)" = "" ]; then
    git reset HEAD "$path"
    echo "Nothing to commit"
    exit 1
fi

# Use the provided commit message and exit early
if [ "${message:-}" != "" ]; then
    git commit -m "$message"
    exit
fi

while true; do
    >&2 echo
    >&2 echo "Staged some changes. Now what?"
    >&2 echo
    >&2 echo 'c = commit'
    >&2 echo "a = abort"
    >&2 echo "f = to make fixup commit"
    >&2 echo "d = show diff"
    read -n1 option
    >&2 echo


    if [ "$option" = "c" ] || [ "$option" = "" ] ; then
        read -p "Enter commit message> " commit_message
        if [ "$commit_message" = "" ]; then
            # Use the EDITOR to edit the commit message if empty
            git commit
        else
            git commit -m "$commit_message"
        fi
    elif [ "$option" = "d" ]; then
        git diff --cached
        continue
    elif [ "$option" = "a" ]; then
        break
    elif [ "$option" = "f" ]; then
        git commit --fixup=HEAD
        >&2 echo
        >&2 echo "Rebase squash to parent commit now? y/n"
        read -n1 rebase
        if [ "$rebase" = "y" ]; then
            git rebase -i --autosquash --autostash HEAD^^
        fi
    else
        continue
    fi

    break
done

# Clean any --intent-to-add files
git reset HEAD "$path"